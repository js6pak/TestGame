name: Build

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      strategy:
        required: true
        type: string
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true

jobs:
  build:
    name: ${{ matrix.name }}
    strategy: ${{ fromJSON(inputs.strategy) }}
    runs-on: ${{ matrix.runner }}

    env:
      # Avoid pre-installed modern platforms which crash Unity <2019
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android

    steps:
      - uses: actions/checkout@v4

      - name: Setup Android Sdk
        if: matrix.needs_android_sdk
        uses: android-actions/setup-android@9fc6c4e9069bf8d3d10b2204b1fb8f6ef7065407 # v3.2.2
        with:
          packages: 'tools platforms;android-29 build-tools;29.0.3'

      - name: Setup Java 8
        if: matrix.needs_android_sdk
        shell: bash
        run: |
          echo "JAVA_HOME=$JAVA_HOME_8_X64" >>"$GITHUB_ENV"
          echo "$JAVA_HOME_8_X64/bin" >>"$GITHUB_PATH"

      - name: Setup Android Ndk
        if: matrix.needs_android_ndk
        shell: bash
        env:
          NDK_VERSION: '${{ matrix.needs_android_ndk }}'
        run: |
          if [[ "$OSTYPE" == "linux"* ]]; then
              PLATFORM="linux-x86_64"
          elif [[ "$OSTYPE" == "darwin"* ]]; then
              PLATFORM="darwin-x86_64"
          elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" || "$OSTYPE" == "win32" ]]; then
              PLATFORM="windows-x86_64"
          else
              echo "Unsupported operating system: $OSTYPE"
              exit 1
          fi
          curl -LO "https://dl.google.com/android/repository/android-ndk-$NDK_VERSION-$PLATFORM.zip"
          unzip android-ndk-"$NDK_VERSION"-*.zip
          ANDROID_NDK_HOME="${{ github.workspace }}/android-ndk-$NDK_VERSION"
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >>"$GITHUB_ENV"
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_HOME" >>"$GITHUB_ENV"

      - name: Setup Unity
        uses: js6pak/unity-setup@main
        with:
          version-file: 'None'
          unity-version: ${{ matrix.unity_version }}
          modules: ${{ matrix.modules || 'None' }}
          install-path: '${{ runner.tool_cache }}/unity'

      - name: Activate Unity
        uses: js6pak/activate-unity-license@main
        with:
          license: 'Personal'
          username: ${{ secrets.UNITY_EMAIL }}
          password: ${{ secrets.UNITY_PASSWORD }}

      - name: Build
        uses: js6pak/unity-action@main
        with:
          project-path: ${{ github.workspace }}
          args: '-quit -executeMethod UnityPlayerBuildTools.StartCommandLineBuild -buildTarget ${{ matrix.build_target }} -scriptingBackend ${{ matrix.scripting_implementation }} ${{ matrix.extra_args }}'
        timeout-minutes: 60

      - name: Zip
        shell: bash
        run: |
          cd "./Builds/${{ matrix.build_target }}"
          zip "../../${{ matrix.name }}.zip" *)

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: TestGame ${{ matrix.name }}
          path: ./Builds/${{ matrix.build_target }}/*

      - name: Release
        if: github.ref == 'refs/heads/gen-matrix' # TODO
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        with:
          tag_name: v0
          files: ${{ matrix.name }}.zip

      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          retention-days: 1
          name: Logs ${{ matrix.name }}
          path: |
            ${{ github.workspace }}/**/*.log

      - name: Setup tmate session
        if: failure() && github.run_attempt != 1
        uses: mxschmitt/action-tmate@7b6a61a73bbb9793cb80ad69b8dd8ac19261834c # v3.22
