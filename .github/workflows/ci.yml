name: CI

permissions:
  contents: read

on:
  push:
  workflow_dispatch:
    inputs:
      targets:
        description: Targets to build
        type: string

env:
  TAG_NAME: v0

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-24.04
    outputs:
      jobs: ${{ steps.compute-matrix.outputs.jobs }}
    env:
      DOTNET_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github/workflows

      - uses: nike4613/install-dotnet@6625f6cf2b076b088eee77a005f5f226e89aa580
        with:
          global-json: ./.github/workflows/gen-matrix/global.json
        env:
          DOTNET_INSTALL_DIR: ${{ runner.tool_cache }}/dotnet

      - name: Compute targets
        if: ${{ !inputs.targets }}
        id: compute-targets
        uses: actions/github-script@v7
        with:
          result-encoding: 'string'
          script: |
            const { TAG_NAME } = process.env;

            const commits = context.payload.commits;
            if (commits) {
              const matches = [];

              for (const commit of commits) {
                const message = commit.message;
                if (message.includes('[rebuild]')) {
                  return '*';
                }
            
                const match = /\[build: (.+)\]/.exec(message);
                if (match) {
                  matches.push(match[1]);
                }
              }

              if (matches.length !== 0) {
                return matches.join(' ');
              }
            }

            let release;
            try {
              release = await github.rest.repos.getReleaseByTag({ ...context.repo, tag: TAG_NAME });
            } catch (e) {
              if (e.status === 404) {
                console.log('Release not found');
                return '*';
              }
              throw e;
            }

            return '* ' + release.data.assets
              .map(a => a.name)
              .filter(a => a.endsWith('.zip'))
              .map(a => '!' + a.substring(0, a.length - '.zip'.length))
              .join(' ');

      - name: Compute matrix
        id: compute-matrix
        if: ${{ inputs.targets || steps.compute-targets.outputs.result }}
        env:
          TARGETS: ${{ inputs.targets || steps.compute-targets.outputs.result }}
        run: dotnet run --project ./.github/workflows/gen-matrix/gen-matrix.csproj -c Release -- "$TARGETS"

  build:
    needs: [ setup ]
    if: needs.setup.result == 'success' && needs.setup.outputs.jobs
    strategy:
      matrix: ${{ needs.setup.result == 'success' && needs.setup.outputs.jobs && fromJSON(needs.setup.outputs.jobs) || '' }}
      fail-fast: false
    name: ${{ matrix.name || 'Build' }}
    uses: ./.github/workflows/build.yml
    with:
      strategy: ${{ toJSON(matrix.strategy) }}
    secrets: inherit
    permissions:
      contents: write
